AWSTemplateFormatVersion: "2010-09-09"
Parameters: 
  lambdaFunctionName: 
    Type: String
    Default: "ImageResize"
  apiName: 
    Type: String
    Default: "lambda-api-gw"    
  bucketName: 
    Type: String
    Default: "mario-resized-images"    

Resources:

  account:
    Type: 'AWS::ApiGateway::Account'
    Properties:   
      CloudWatchRoleArn: !GetAtt 
        - CloudWatchRole
        - Arn

  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      BinaryMediaTypes:
        - "*/*"
      Name: !Ref "apiName"
      Description: "API to connect with the resize Lambda"

  proxyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      PathPart: 'image'

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          -
            StatusCode: 200
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !Ref proxyResource
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"        

  prdStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - "apiGatewayRootMethod"  
    Properties:
      StageName: "PRD"
      RestApiId: !Ref apiGateway
      DeploymentId: !Ref apiGatewayDeployment
      Description: "prd stage description"
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt apiLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      PackageType: Image
      Code:
        ImageUri: 611569517519.dkr.ecr.us-east-1.amazonaws.com/node-resize:latest
      Description: "Node.js resize function"
      FunctionName: !Ref "lambdaFunctionName"
      Role: !GetAtt "lambdaIAMRole.Arn"
      Timeout: 60
      TracingConfig: 
        Mode: Active

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"      

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: "lambda"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Effect: "Allow"
                Resource: "*"
          PolicyName: "lambdaVPC"      
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:*"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::${bucketName}/*"
          PolicyName: "lambdaS3"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Effect: "Allow"
                Resource: "*"
          PolicyName: "lambdaXRay"          

  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90          

  apiLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/api/${apiName}"
      RetentionInDays: 90 

  # S3Bucket:
  #   Type: "AWS::S3::Bucket"
  #   DeletionPolicy: Retain
  #   Properties:
  #     BucketName: !Ref "bucketName"     